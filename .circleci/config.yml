# jobs
defaults: &defaults
  docker:
    - image: docker:dind
  working_directory: ~/code

nodejs: &nodejs
  docker:
    - image: circleci/node:8.11
  working_directory: ~/code

version: 2
jobs:
  build-develop:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: pull submodules
          command: |
              apk add --no-cache git
              git submodule sync --recursive
              git submodule update --init --recursive
      - run:
          name: build image
          command: |
              docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
              docker build --pull --build-arg BLOCKCHAIN_NETWORK_ID=4 -t "$DOCKERHUB_USERNAME/$CI_REGISTRY_IMAGE" .
              docker push "$DOCKERHUB_USERNAME/$CI_REGISTRY_IMAGE"
  build-stage:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: pull submodules
          command: |
             apk add --no-cache git
             git submodule sync --recursive
             git submodule update --init --recursive
      - run:
          name: build image
          command: |
             docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
             docker build --pull --build-arg BLOCKCHAIN_NETWORK_ID=4 -t "$DOCKERHUB_USERNAME/$CI_REGISTRY_IMAGE:stage" .
             docker push "$DOCKERHUB_USERNAME/$CI_REGISTRY_IMAGE:stage"
  deploy-develop:
    <<: *defaults
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: setup
          command: |
            apk add --no-cache openssh-client
            eval $(ssh-agent -s)
      - run:
          name: deploy
          command: |
            ssh -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_SERVER" docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            ssh -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_SERVER" "cd /opt/servers/ && docker-compose -f docker-compose-w12-product.yml pull && docker-compose -f docker-compose-w12-product.yml up -d"
  deploy-stage:
    <<: *defaults
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: setup
          command: |
              apk add --no-cache openssh-client
              eval $(ssh-agent -s)
      - run:
          name: deploy
          command: |
              ssh -o StrictHostKeyChecking=no "$DEPLOY_USER_STAGE@$DEPLOY_SERVER_STAGE" "sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD"
              ssh -o StrictHostKeyChecking=no "$DEPLOY_USER_STAGE@$DEPLOY_SERVER_STAGE" "cd /var/apps/w12-stage/ && sudo docker-compose -f docker-compose-w12-stage.yml pull && sudo docker-compose -f docker-compose-w12-stage.yml up -d"
  generate-release:
    <<: *nodejs
    steps:
      - checkout
      - run:
          name: build
          command: |
            git submodule update --init --recursive
            sudo npm i -g npm && npm -v
            npm ci
            WEBPACK_PUBLIC_PATH=/testnet/build/ BLOCKCHAIN_NETWORK_ID=1 npm run build
      - run:
          name: generate release
          command: |
            npm run gen-release
            npm run gen-release-bundle
            npm run upload-release-bundle


# workflows
develop_filters: &develop_filters
  filters:
    branches:
      only:
        - develop

stage_filters: &stage_filters
  filters:
    branches:
      only:
        - stage

workflows:
  version: 2
  build_deploy:
    jobs:
      - build-develop:
          <<: *develop_filters
      - deploy-develop:
          <<: *develop_filters
          requires:
            - build-develop
      - build-stage:
          <<: *stage_filters
      - deploy-stage:
          <<: *stage_filters
          requires:
            - build-stage
      - generate-release:
          filters:
            tags:
              only: /^v\d{1,4}\.\d{1,4}\.\d{1,4}(-(alpha|beta|rc)\.\d+)?$/
            branches:
              ignore: /.*/
